/* 0 */

/* 1 */

/* 2 */

/* 3 */

/* binding */

/* eslint-disable @typescript-eslint/camelcase,@typescript-eslint/no-use-before-define */

/* eslint-disable @typescript-eslint/no-explicit-any,no-undef */

/* eslint-disable @typescript-eslint/no-use-before-define,@typescript-eslint/camelcase */

/* harmony export (binding) */

/* harmony import */

/**
   * Adds a change listener to the storage and returns the listener ID.
   * 'name' is the name of the observed variable.
   * The 'remote' argument of the callback function shows whether this value was modified from the instance of another tab (true) or within this script instance (false).
   * Therefore this functionality can be used by scripts of different browser tabs to communicate with each other.
   * @param name
   * @param callback
   * @return number
   */

/**
   * Adds the given style to the document and returns the injected style element.
   * @param css
   */

/**
   * Copies data into the clipboard. The parameter 'info' can be an object like "{ type: 'text', mimetype: 'text/plain'}" or just a string expressing the type ("text" or "html").
   * @param data
   * @param info
   */

/**
   * Deletes 'name' from storage.
   * @param name
   * @constructor
   */

/**
   * Downloads a given URL to the local disk.
   * @param urlOrdetails
   * @param name
   */

/**
   * Get a object that is persistent as long as this tab is open.
   * @param callback
   */

/**
   * Get all tab objects as a hash to communicate with other script instances.
   * @param callback
   */

/**
   * Get some info about the script and TM. The object might look like this:
   */

/**
   * Get the base64 encoded URI of a predefined @resource tag at the script header.
   * @param name
   */

/**
   * Get the content of a predefined @resource tag at the script header.
   * @param name
   */

/**
   * Get the value of 'name' from storage.
   * @param name
   * @param defaultValue
   * @constructor
   */

/**
   * List all names of the storage.
   */

/**
   * Log a message to the console.
   * @param message
   */

/**
   * Make an xmlHttpRequest.
   * Property of details:
   * @param details
   */

/**
   * Open a new tab with this url. The options object can have the following properties:
   * @param url
   * @param loadInBackground
   */

/**
   * Register a menu to be displayed at the Tampermonkey menu at pages where this script runs and returns a menu command ID.
   * @param name
   * @param callback
   * @param accessKey
   * @return number a menu command ID.
   */

/**
   * Removes a change listener by its ID.
   * @param listenerId
   */

/**
   * Save the tab object to reopen it after a page unload.
   * @param tab
   */

/**
   * Set the value of 'name' to the storage.
   * @param name
   * @param value
   * @constructor
   */

/**
   * Shows a HTML5 Desktop notification and/or highlight the current tab.
   * @param textOrDetails
   * @param titleOrOndone
   * @param image
   * @param onclick
   */

/**
   * Unregister a menu command that was previously registered by GM_registerMenuCommand with the given menu command ID.
   * @param menuCmdId
   */

/**
 * This section describes how the Tampermonkey API can be used
 * Application Programming Interface
 * @link https://www.tampermonkey.net/documentation.php
 */

/************************************************************************/

/******/

/***/

// @ts-ignore

// CONCATENATED MODULE: ./src/apis.ts

// CONCATENATED MODULE: ./src/index.ts

// Check if module is in cache

// Create a new module (and put it into the cache)

// ESM COMPAT FLAG

// EXPORTS

// EXTERNAL MODULE: ./src/InstaceForSystem.ts

// EXTERNAL MODULE: ./src/types.ts

// Execute the module function

// Flag the module as loaded

// Load entry module and return exports

// Object.prototype.hasOwnProperty.call

// Remove Item if target still in stop cluster

// Return the exports of the module

// The module cache

// The require function

// Todo return error message

// __webpack_public_path__

// create a fake namespace object

// define __esModule on exports

// define getter function for harmony exports

// eslint-disable-next-line @typescript-eslint/camelcase

// eslint-disable-next-line @typescript-eslint/explicit-function-return-type

// expose the module cache

// expose the modules object (__webpack_modules__)

// getDefaultExport function for compatibility with non-harmony modules

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// webpackBootstrap
